name : building and run Docker image
on:
 push:
  branches : ['master']  

 pull_request:
  branches : ['master']
  
jobs:
  build:
    name: build docker image
    runs-on: ubuntu-latest
    outputs:
      branch : ${{steps.print_branch.outputs.branch}}
      #image :  ${{steps.image_name.outputs.branch}}
  
    steps:
      - uses: actions/checkout@v3
      - name: starting CI pipeline
        shell: bash
        run: echo "starting CI Pipeline"
      - name: Extracting branch name from commit
        if: github.event_name != 'pull_request'
        shell: bash
        run : 
          echo "Branch name is"
          echo "$BRANCH_NAME = $(echo${GITHUB_REF#refs/heads/})" >>GITHUB_ENV
      - name: Extracting branch name from PR
        if: github.event_name == 'pull_request'
        id : print_branch
        shell: bash
        run : 
          echo"Branch name is"
          echo "$BRANCH_NAME = $(echo${GITHUB_HEAD_REF})" >>GITHUB_ENV

      - name: print the branch name
        shell : bash
        run: |
         echo $BRANCH_NAME
      - name : login to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with :
          aws-access-key-id: ${{ secrets.ENV0_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ENV0_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
              
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push WEB image to Amazon ECR
        id: build_web_image
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: ${{vars.ECR_WEB_REPOSITORY}}
          IMAGE_TAG: ${{github.sha}}
        shell: bash
        run : |
          
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  Deploy:
   name: Deploy Dev
   needs: build
   runs-on: ubuntu-latest

   steps:
    - name : login to AWS
      uses: aws-actions/configure-aws-credentials@v1
      with :
        aws-access-key-id: ${{ secrets.ENV0_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ENV0_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: login to ECR
      id : login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Reset WEB Container
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm-web-stop
      with:
        aws-region: ${{ vars.AWS_REGION }}
        aws-access-key-id: ${{ secrets.ENV0_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ENV0_AWS_SECRET_ACCESS_KEY }}
        instance-ids: "i-020b6cb568af06f6a"
        working-directory: ""
        command: sudo docker stop $(docker ps -a -q) && sudo docker rm $(docker ps -a -q) && docker rmi -f $(docker images -aq)
        comment: Remove old WEB_DEV deployment

    - name: Run WEB Application
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm-web
      with:
        aws-region: ${{ vars.AWS_REGION }}
        aws-access-key-id: ${{ secrets.ENV0_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ENV0_AWS_SECRET_ACCESS_KEY }}
        instance-ids: "i-020b6cb568af06f6a"
        working-directory: ""
        command: sudo aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}  && docker run -d --log-driver=awslogs --log-opt awslogs-region=us-west-2 --log-opt awslogs-group=helix-web-dev --name helix-web -p 80:80 ${{ steps.login-ecr.outputs.registry }}/helixinsightswebecr:${{ github.sha }}
        
        comment: Deploy WEB_DEV container
  
